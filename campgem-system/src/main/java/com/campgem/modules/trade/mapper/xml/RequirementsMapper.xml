<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.campgem.modules.trade.mapper.RequirementsMapper">
	
	<resultMap id="requirementMap" type="com.campgem.modules.trade.vo.RequirementsVo">
		<id column="requirementId" property="id"/>
		<collection property="requirementsImages" select="com.campgem.modules.trade.mapper.RequirementsImagesMapper.queryRequirementsImages"
		            ofType="com.campgem.modules.trade.entity.RequirementsImages" column="requirementId"/>
	</resultMap>
	
	<update id="incrementReviewCount">
		UPDATE requirements SET review_count = review_count + 1 WHERE id = #{requirementId}
	</update>
	
	<select id="queryPageList" resultMap="requirementMap">
		SELECT
			r.id as requirementId,
			r.uid,
			ub.src_face,
			ub.nick_name,
			m.member_type,
			r.requirement_name,
			r.buying_price,
			r.requirement_description,
			r.create_time
		FROM
			requirements r
				LEFT JOIN user_base ub ON ub.id = r.uid
				LEFT JOIN member m ON m.user_base_id = r.uid
		WHERE
			r.del_flag = 0
		  AND r.status = 0
			<if test="query.categoryId != 'all'">
				AND category_id = #{query.categoryId}
			</if>
		<choose>
			<when test="query.sort == 0">
				ORDER BY r.create_time desc
			</when>
			<when test="query.sort == 1">
				ORDER BY r.review_count desc
			</when>
			<when test="query.sort == 2">
				ORDER BY r.buying_price asc
			</when>
			<when test="query.sort == 3">
				ORDER BY r.buying_price desc
			</when>
		</choose>
	</select>
	
	<sql id="queryConditions">
		<where>
			<if test="1 == 1">
				r.del_flag = 0
			</if>
			
			<if test="null != queryDto.requirementName and queryDto.requirementName != ''">
				<bind name="cname" value="'%' + queryDto.requirementName + '%'" />
				AND r.requirement_name like #{cname}
			</if>
			
			<if test="null != queryDto.sellerName and queryDto.sellerName != ''">
				AND r.seller_name = #{queryDto.seller_name}
			</if>
		</where>
	</sql>
	<select id="queryManagePageList" resultType="com.campgem.modules.trade.vo.manage.MRequirementsListVo">
		SELECT r.id,
		       r.seller_name,
		       c.city_name,
		       r.requirement_name,
		       r.status,
		       r.create_time
		FROM requirements r
		    LEFT JOIN member m on m.user_base_id = r.uid
			LEFT JOIN city c on c.id = m.city_id
		<include refid="queryConditions" />
		ORDER BY r.create_time DESC
	</select>
	
	
	<resultMap id="requirementDetail" type="com.campgem.modules.trade.vo.RequirementsDetailVo">
		<id property="id" column="rid" />
		<collection property="requirementsImages" select="com.campgem.modules.trade.mapper.RequirementsImagesMapper.queryRequirementsImages"
		            ofType="com.campgem.modules.trade.entity.RequirementsImages" column="rid"/>
	</resultMap>
	<select id="queryRequirementDetail" resultMap="requirementDetail">
		SELECT
			r.id                        AS rid,
			r.uid,
			m.member_name,
			m.member_type,
			r.requirement_name,
			r.requirement_description,
			r.review_count,
			r.buying_price,
			r.create_time
		FROM
			requirements r
				LEFT JOIN member m ON m.user_base_id = r.uid
		WHERE
			r.del_flag = 0
		  AND r.status = 0
		  AND r.id = #{requirementId}
	</select>
	
	<resultMap id="manageRequirementDetail" type="com.campgem.modules.trade.vo.manage.MRequirementsDetailVo">
		<id property="id" column="rid" />
		<collection property="requirementsImages" select="com.campgem.modules.trade.mapper.RequirementsImagesMapper.queryRequirementsImages"
		            ofType="com.campgem.modules.trade.entity.RequirementsImages" column="rid"/>
	</resultMap>
	<select id="queryManageRequirementDetail" resultMap="manageRequirementDetail">
		SELECT
			r.id                    AS rid,
		    r.uid,
	       r.category_id,
	       r.requirement_name,
	       r.buying_price,
	       r.requirement_description
		FROM requirements r
		WHERE r.id = #{requirementId}
	</select>
	
	<select id="queryUserPageList" resultType="com.campgem.modules.user.vo.UserRequirementListVo">
		SELECT r.id,
		       r.requirement_name,
		       (SELECT requirement_image FROM requirements_images ri WHERE  ri.requirement_id = r.id AND ri.is_list_image = 1 LIMIT 1) AS list_image,
		       r.buying_price,
		       r.status
		 FROM requirements r
		WHERE r.del_flag = 0
		ORDER BY r.create_time DESC
	</select>
</mapper>